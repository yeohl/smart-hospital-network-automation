import json
import logging
import urllib3

logger = logging.getLogger()
logger.setLevel(logging.INFO)

http = urllib3.PoolManager()

SLACK_WEBHOOK_URL = (
    "https://hooks.slack.com/services/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"
)

def notify_slack(text: str) -> None:
    try:
        resp = http.request(
            "POST",
            SLACK_WEBHOOK_URL,
            body=json.dumps({"text": text}).encode(),
            headers={"Content-Type": "application/json"},
        )
        logger.info(f"[Slack] 전송 OK ({resp.status})")
    except Exception as e:
        logger.error(f"[Slack] 전송 실패: {e}")

def extract_instance_id_from_alarm(alarm_name: str) -> str:
    mapping = {
        "WARD-A_i-a1_HealthCheck": "i-0b63747b3d1f52972",
        "WARD-A_i-a2_HealthCheck": "i-0fd919c3aa8dea3e9",
        "WARD-B_i-b1_HealthCheck": "i-045763e17c20e1b8a",
        "WARD-B_i-b2_HealthCheck": "i-0a868727c52163cf1",
        "WARD-C_i-c1_HealthCheck": "i-0cdf03f03f0353f3f",
        "WARD-C_i-c2_HealthCheck": "i-056a592094da69fe6",
    }
    return mapping.get(alarm_name, "Unknown")

def get_ward_by_instance_id(inst_id: str) -> str:
    mapping = {
        "i-0b63747b3d1f52972": "A",
        "i-0fd919c3aa8dea3e9": "A",
        "i-045763e17c20e1b8a": "B",
        "i-0a868727c52163cf1": "B",
        "i-0cdf03f03f0353f3f": "C",
        "i-056a592094da69fe6": "C",
    }
    return mapping.get(inst_id, "Unknown")

def lambda_handler(event, context):
    logger.info("=== EVENT ===")
    logger.info(json.dumps(event))

    # ✅ SNS 기반 CloudWatch 알람 처리
    if event.get("Records", [{}])[0].get("EventSource") == "aws:sns":
        try:
            msg = json.loads(event["Records"][0]["Sns"]["Message"])
            alarm = msg.get("AlarmName", "Unknown")
            inst_id = extract_instance_id_from_alarm(alarm)
            ward = get_ward_by_instance_id(inst_id)

            notify_slack(
                f"🚨 *네트워크 장애 감지!*\n"
                f"> 🏥 *병동:* `{ward}`\n"
                f"> 🖥️ *장애 의료기기:* `{alarm}`\n"
                f"> 💻 *인스턴스:* `{inst_id}`"
            )
        except Exception as e:
            logger.error(f"SNS 파싱 실패: {e}")
            return {"statusCode": 500, "body": "SNS 처리 오류"}

    # ✅ CloudTrail → StopInstances 이벤트 처리
    elif event.get("source") == "aws.ec2":
        try:
            detail = event["detail"]
            evt_name = detail.get("eventName", "Unknown")

            inst_id = (
                detail.get("requestParameters", {})
                .get("instancesSet", {})
                .get("items", [{}])[0]
                .get("instanceId", "Unknown")
            )

            ward = get_ward_by_instance_id(inst_id)

            notify_slack(
                f"⚠️ *의료기기 장애 감지!*\n"
                f"> 🏥 *병동:* `{ward}`\n"
                f"> 💻 *장애 의료기기:* `{inst_id}`"
            )
        except Exception as e:
            logger.error(f"CloudTrail 파싱 실패: {e}")
            return {"statusCode": 500, "body": "CloudTrail 처리 오류"}

    # ✅ 회선 전환 완료 알림
    elif event.get("type") == "ROUTE_RECOVERY":
        inst_id = event.get("instance_id", "Unknown")
        eni_id = event.get("eni_id", "Unknown")
        status = event.get("status", "Unknown")
        emoji = "✅" if status == "SUCCESS" else "❌"
        ward = get_ward_by_instance_id(inst_id)

        notify_slack(
            f"{emoji} *조치 결과 ({status})*\n"
            f"> 🏥 *병동:* `{ward}`\n"
            f"> 🔁 `{inst_id}` → `{eni_id}`"
        )

    else:
        logger.warning("지원하지 않는 이벤트 형식")
        return {"statusCode": 400, "body": "Unsupported event"}

    return {"statusCode": 200, "body": "Slack 알림 완료"}
